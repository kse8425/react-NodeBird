1. redux-thunk 이해하기
    - redux-thunk는 비동기 액션을 dispatch할 수 있게 도와주는 redux 미들웨어
    - npm i redux-thunk 설치
    - store/configureStore.js redux-thunk 추가
    - loggerMiddleware 만들고 사용해보기
    - redux-thunk 대신 redux-saga를 쓰는 이유는 saga가 더 많은 기능을 제공하기 때문

2. saga 설치하고 generator 이해하기
    - redux-thunk 삭제(num rm redux-thunk)후 redux-saga 설치(npm i redux-saga)
    - 미들웨어에 sagaMiddleware 추가, store.sagaTask에 rootSaga 저장
    - sagas/index.js 생성
    - generator는 중단점이 있는 함수
    - 무한 루프를 돌려서 무한을 표현하거나 이벤트 리스너 역할을 하는 함수를 만들 수 있음

3. saga 이펙트 알아보기
    - redux-saga/effects 에서 all,fork,call,take,put 불러오기
    - all은 배열을 받고 배열안의 항목을 한번에 실행
    - fork는 비동기 함수 호출, call은 동기 함수 호출
    - take는 액션이 실행될 때까지 대기, 액션이 실행되면 인자로 받은 함수 실행
    - put은 dispatch와 같다.

    - 로그인을 saga로 구현하면, rootSaga에 watchLogIn 등록
    - watchLogIn은 LOG_IN_REQUEST 액션이 올때까지 대기, 액션이 오면 logIn generator 실행
    - logIn generator는 서버로 로그인을 보내는 logInAPI 함수를 실행
    - 요청에 성공하면 LOG_IN_SUCCESS 액션 dispatch, 실패하면 LOG_IN_FAILURE 액션 dispatch
    - 같은 패턴으로 LOG_OUT, ADD_POST 구현
    
    - 실제 로그인 요청을 하려면 데이터가 필요한데 데이터는 action.data로 전달
    - call이나 fork를 사용한다면 함수와 인자를 펼쳐서 입력한다.
    - ex) call(login, data) => login(data)와 같이 호출된다.
    - generator 함수를 쓰면 테스트하기 편하다.

4. take, take 시리즈, throttle 알아보기
    - take는 한번 밖에 못 쓴다. while(true) 감싸면 여러번 사용할 수 있다.
    - takeEvery는 여러번 사용할 수 있다.
    - takeLatest는 마지막 액션만 실행된다. 실수로 발생한 중복 요청을 막을 수 있다.
    - takeLatest는 Back-end에서 오는 요청을 취소하는 것이다. 응답을 취소하진 않는다. 따라서 서버에는 2개의 요청이 실행된다.
    - throttle는 설정한 시간동안 요청을 한 번만 보낸다.
    - 서버를 구현하기 전까지 delay 함수를 사용한다.

5. saga 쪼개고 reducer와 연결하기
    - index.js 코드량이 많아지만 여러 개의 js로 쪼갠다
    - post.js, user.js 생성
    - user.js에 login,logout 함수 옮기기
    - post.js에 ADD_POST 함수 옮기기
    - indjex.js에서 userSaga,postSaga 호출해서 rootSaga에 추가
    
    - saga에 구현된 액션을 reducer에 등록
    - 기능(로그인,로그아웃,글작성)마다 요청,성공,실패 액션을 만든다.
    - 기존에 사용하던 액션을 saga로 구현한 액션으로 수정 

6. 액션과 상태 정리하기
    - 액션 이름을 변수로 추출
    - state변수들 선언(Loading,Done,Error)
    - dummy 데이터를 반환하는 함수 생성
    - 회원가입(signUp) 액션 등록, state 변수 선언
    - 댓글작성(addComment) 액션 등록, state 변수 선언

7. 바뀐 상태 적용하고 eslint 점검하기
    - 바뀐 상태 정보 수정하기
    - ID를 email로 수정
    - 프로필 화면 카드 내용 수정
    - 프로필 페이지 더미 데이터를 redux로 교체
    - Post Form 수정
    - 댓글 Form 수정
    - 커스텀 훅(useInput)에 setValue 리턴 값에 추가하고 사용하기
    - npm i -D babel-eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-react-hooks
    - .eslintrc 수정
    - npm i -D eslint-plugin-jsx-a11y
    - eslint 적용하고 코드 수정하기

8. 게시글, 댓글 saga 작성하기
    - 닉네임 수정(changeNickname) 액션 만들기
    - PostForm에서 직접 입력한 데이터 출력하기
    - post의 key 값을 지정하기 위해 npm i shortid 설치
    - 더미데이터를 편리하게 생성하기 위해 npm i faker 설치
    - post.js에서 shortid 불러와서 dummyPost.id에 적용
    - 댓글 등록 구현하기
    - 댓글 등록 시 댓글 등록된 post의 index 찾기
    - post index를 이용해서 post 데이터를 불변성을 유지하면서 복사
    - 복사된 post에 불변성을 유지하면서 댓글 추가
    - 변경된 post를 mainPost 객체에 불변성 유지하면서 추가
    - mainPost 반환

9. 게시글 삭제 saga 작성하기
    - 짹짹, 팔로잉, 팔로워 구현하기
    - user 더미데이터에 팔로잉,팔로워 더미데이터 추가
    - 게시글 삭제 기능 구현
    - User에서 Post reduce에 접근하기 위해 액션(add_post_to_me, remove_post_of_me) 만들기
    - addpost함수 실행 시 ADD_POST_TO_ME 액션 호출
    - User ruducer에 ADD_POST_TO_ME 액션 구현(불변성 유지)
    - User ruducer에 REMOVE_POST_OF_ME 액션 구현(filter 사용)
    - PostCard.js에서 삭제 버튼 클릭 시 REMOVE_POST_REQUEST 액션 호출

10. immer 도입하기
    - npm i immer 설치
    - immer 개발한 사람 상줘야 함!!!
    - return immer(state, draft=>{})하고 switch문을 callback 함수 안으로 이동
    - state 대신 draft를 이용해 상태를 관리하면 immer 불변성을 지켜 줌
    - 배열은 unshift 함수 이용

11. faker로 실감나는 더미데이터 만들기