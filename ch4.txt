1. 노드로 서버 구동하기
    - node는 서버가 아니다.
    - 서버에 부하가 발생하면 스케일링이 필요하다.
    - 스케일링 시 부하가 발생하지 않는 서비스도 복사가 되기 때문에 나눠서 개발하는 것이 좋다.
    - app.js에 http.server 실행 코드 작성
    - res.write로 내용을 보내고, 마지막은 res.end로 끝나야 한다.
    - 기본 node http는 if문이 많아지기 때문에 express 프레임워크를 사용한다.

2. 익스프레스로 라우팅하기
    - npm i express
    - "/", "/api", "/api/posts" 등 get 요청 라우팅 테스트
    - post,delete 라우팅 테스트
    - url과 http method, 응답 양식은 front,back 개발자들이 협의해서 결정
    - 보통 REST API 방식으로 url 설정
    - get,post,put,delete,patch,options,head 등을 자주 사용
    - postman 설치하고 테스트 해보기

3. 익스프레스 라우터 분리하기
    - routes 폴더 생성 후 post.js 생성
    - url이 post로 중복되는 부분을 post.js로 이동
    - app.js에 url post로 된 부분을 app.use() 함수로 수정
    - app.use('/post',postRoute) -> 첫번째 인자는 prefix

4. MySQL과 시퀄라이즈 연결하기
    - PC에 postgres가 설치되어 있어서 postgres로 진행
    - npm i sequelize sequelize-cli pg 설치
    - npx sequelize init 실행 후 config.json파일에서 db 정보 수정
    - models/index.js에서 DB와 Node 연결

5. 시퀄라이즈 모델 만들기
    - user,post,comment,hashtag,image 모델 틀 작성
    - user 필드 생성 ( email - STRING(30), nickname - STRING(30), password - STRING(100) )
    - post,comment 필드 생성 ( content : TEXT )
    - hashtag 필드 생성 ( name : STRING(20) )
    - image 필드 생성 ( src : STRING(200) )

6. 시퀄라이즈 관계 설정하기
    - User와 Post,Comment는 일대다 관계 (ex: db.User.hasMany(db.Post) )
    - Post와 Comment,image는 일대다 관계 ( db.Post.hasMany(db.Comment) )
    - Post와 Hashtag는 다대다 관계 (ex: db.Hashtag.belongsToMany(db.Post) )
    - 좋아요는 User와 Post를 다대다 관계로 설정해서 구현
    - Post가 중복되기 때문에 별칭을 붙인다
    - 팔로워는 User와 User를 다대다 관계로 설정해서 구현
    - 같은 테이블에서 다대다 관계로 맞으면 구분이 어렵기 때문에 foreignkey로 칼럼 이름을 붙여준다
    - 리트윗은 Post와 post를 일대다 관계로 설정해서 구현

7. 시퀄라이즈 sync + nodemon
    - models/index.js에서 앞서 작성한 파일 불러오기
    - app.js에서 변수 db에 models 불러오기
    - db 연결 코드 작성( db.sequelize.sync() )
    - npx sequelize db:create 실행 -> 데이터베이스에 table 생성
    - npm i -D nodemon 설치

8. 회원가입 구현하기
    - sage/user에서 signUp 함수에서 post요청 보내도록 수정
    - user router에서 DB에 이메일,닉네임,비밀번호 저장하는 코드 작성
    - post방식으로 data를 넘기면 req.body 에서 꺼내 쓸 수 있다
    - 비밀번호를 암호화 하기 위해 bcrypt 설치(npm i bcrypt)
    - 비밀번호 암호화, user 이메일 중복 체크 기능 구현

9. CORS 문제 해결하기
    - 요청을 front 서버로 보내는 proxy 방법이 있다
    - express에서 응답 헤더에 Access-Control-Allow-Origin 를 추가하는 방법도 있다
    - npm i cors설치 후 cors 설정
    - 회원 가입 완료 시 / 페이지로 이동
    - 회원 가입 오류 시 alert 호출

10. 패스포트로 로그인하기
    - axios에서 baseURL 설정하기
    - npm i passport possport-local 설치
    - passport을 설정하기 위해 폴더 및 파일 구조 생성
    - 요청 받은 이메일로 존재하는 이메일 인지 확인하는 코드 작성
    - 요청 받은 비밀번호가 db 비밀번호와 일치하는지 확인하는 코드 작성
    - login router를 작성할 때는 passport.authenticate(전략,콜백)과 같이 작성
    - req,res,next를 사용하기 위해 미들웨어 확장을 사용
    - 서버 에러 시 에러 호출, 클라이언트 에러 시 401 응답
    - 로그인 성공 시 passport 로그인

11. 쿠키/세션과 전체 로그인 흐름
    - npm i express-session 설치
    - session(),passport.initialize(),passport.session() 미들웨어 추가
    - 쿠키: 유저 정보를 임의이 문자열과 맵핑해서 브라우저로 보내준 것
    - passport serializeUser와 deserializeUser 설정
    - 소스코드 내 secret 정보를 저장하기 위해 dotenv 설치(npm i dotenv)
    - logout router 구현

12. 로그인 문제 해결하기
    - 로그인 했을 때 게시글을 읽지 못하는 에러 발생
    - router에서 user 정보를 넘길 때 user와 연관된 정보도 같이 넘긴다
    - user.id로 user를 찾고, Post,Followings,Followers를 include 한다.

13. 미들웨어로 라우터 검사하기
    - 로그인 상태를 검사하는 미들웨어 만들기
    - routes 폴더에 middlewares를 만든다
    - 로그인 했는지 검사하는 isLoggedIn 함수와 로그인 안 했는지 검사하는 isNotLoggedIn 함수를 구현한다
    - 회원가입, 로그인, 로그아웃 router에 적용한다.
    - 중복을 제거하기 위해 미들웨어를 사용한다.

14. 게시글, 댓글 작성하기
    - 게시글 로직 따라가기
    - sagas/addPost에서 back API(method:post url:/post)로 요청 보내기
    - router post(/post)에서 요청으로 온 data로 post 객체 생성
    - 생성된 객체를 다시 front로 보내기
    - saga에서 응답으로 온 post객체를 reducer로 보내기
    - 댓글 로직 따라가기
    - sagas/addComment에서 back API(method:post url:/게시글id/comment)로 요청 보내기
    - 댓글의 url은 동적으로 바뀌기 때문에 '/:postId/comment'와 같이 작성한다
    - 게시글와 댓글의 UserId는 passport 디시리얼라이즈에서 req.user에 넣어주기 때문에 req.user에서 꺼내 사용한다.
    - 미들웨어를 사용해 로그인 한 사용자만 요청할 수 있게 설정
    - 존재하지 않는 게시글에 댓글을 작성할 수 없게 구현

15. credentials로 쿠키 공유하기
    - 게시글, 댓글 테스트
    - 로그인을 했음에도 401에러 발생
    - 브라우저와 백엔드 서버의 도메인이 달라서 발생하는 문제(쿠키가 전달되지 않음)
    - cors 설정에 credentials를 true로 설정해서 해결
    - axios 3번째 인자에서 withCredentials:true를 추가해야 함
    - 이부분이 중복되기 때문에 axios.defaults에서 설정한다.
    - crendentials를 설정하면 cors origin를 *로 사용할 수 없기 때문에 정확한 url를 허용한다.
    - 기본 post만으로는 정보가 부족하기 때문에 추가적인 정보를 include 해준다.

16. 내 로그인 정보 매번 불러오기
    - 새로고침하면 로그인이 풀리는 것 처럼 보이지만, cookie는 가지고 있다.
    - user 객체를 응답하는 /user 라우터를 만든다.
    - 로그아웃 시에는 null를 응답한다.
    - 프론트 index 페이지에서 백엔드 서버로 요청하는 코드를 구현
    - index페이지 시작 때 LOAD_USER_REQUEST 호출
    - LOAD_USER(redux,saga) 코드 구현
    - 로그인 폼이 잠깐 나왔다가 프로필로 넘어가는 건 CSR이라서 그렇다.
    - 프로필에서 필요한 정보는 게시물,팔로잉,팔로워 갯수만 필요하다. 따라서 다른 데이터는 제외하고 가져온다.

17. 게시글 불러오기
    - sagas에서 loadPost Back으로 게시글 목록 요청(/posts get방식) 보내기
    - 게시글을 불러오는 방식에는 limit,offset 방식이 있다.
    - posts route 생성, app.js에서 불러오기
    - post(단수)와 posts(복수)를 구분에 API를 설계하는 것을 선호한다.
    - posts route에서 findAll함수로 모든 post객체를 가져올 수 있다.
    - findAll 조건을 줄 수 있는데 limit 한번에 10개씩 offset 게시글의 시작점을 지정할 수있다.
    - limit, offset 방식은 중간에 데이터를 추가하거나 삭제하면 데이터가 중복되거나 누락 될 수 있기 때문에 실무에서 잘 사용하지 않는다.
    - 그래서 lastId 방식을 사용한다.
    - post 데이터를 가져올 때 완성된 데이터를 가져오도록 한다.
    - 오류를 찾기 위해 npm i morgan 설치 후 app.js에 추가

18. 게시글 좋아요
    - onToggleLike를 onUnlike,onLike로 수정
    - 좋아요 기능 action 생성(LIKE_POST_REQUREST,UNLIKE_POST_REQUREST)
    - 좋아요 url -> /post/:postId/list(patch), 싫어요 url -> /post/:postId/list (delete)
    - reducer에서 좋아요,싫어요 front 로직 구현

19. 게시글 제거 / 닉네임 변경
    - 게시글 제거 router 생성 /post/:postId (delete)
    - 닉네임 수정 router 생성 /user/nickname (patch)
    - 게시글 제거, 닉네임 수정 액션 수정
    - 닉네임 수정 컴포넌트에서 수정 로직을 onSearch에 연결
    - 자신이 쓴 게시글은 팔로우 버튼 안보이기 수정

20. 팔로우 /언팔로우
    - 팔로우 router 생성 /user/1/follow (patch)
    - 언팔로우 router 생성 /user/1/follow (delete)
    - 팔로우 / 언팔로우 액션 수정
    - 팔로워 목록 불러오기 router 생성 /user/followers (get)
    - 팔로잉 목록 불러오기 router 생성 /user/followings (get)
    - 팔로워 / 팔로잉 목록 불러오기 액션 생성
    - 팔로워 제거 액션 생성
    - 팔로워 제거 router 생성 /user/follower/1

21. 이미지 업로드를 위한 multer
    - 파일이나 이미지는 multipart로 데이터가 전송된다.
    - npm i multer를 사용해 multipart 인코딩 데이터를 처리한다.
    - 이미지 업로드 router 생성
    - 이미지 로드 액션 만들기

22. express.static 미들웨어
    - 이미지 미리보기가 안되는 문제(front 서버에 이미지 요청해서 발생하는 오류)
    - 이미지 src 주소를 백엔드 주소로 수정
    - static 미들웨어 추가
    - 이미지 제거 기능 추가
    - 이미지 제거 callback 함수 작성, 액션 생성
    - 게시글 작성 시 이미지 주소도 같이 업로드

23. 해시태그 등록하기
    - post 본문에서 정규식을 통해 해시태그 추출
    - 추출된 해시태그 배열을 해시태그 DB에 등록
    - 중복 등록을 막기 위해 findOrCreate 사용

24. 리트윗하기
    - 리트윗 액션 생성
    - 리트윗 라우터 생성 ( /post/1/retweet POST)
    - 자신의 게시글과 자신의 게시글을 리트윗 한 게시글은 리트윗 거부
    - 리트윗 된 게시글은 원본 게시글을 리트윗
    - 이미 리트윗 했으면 리트윗 거부
    - 리트윗 응답시 관련된 테이블 불러와서 넘겨 줌
    - 리트윗 실패 메시지 경고창으로 출력
    - 리트윗 성공하면 게시글 목록에 추가

25. 쿼리스트링과 lastId 방식
    - 같은 글을 계속 불러오는 문제 -> LastId 방식을 사용해서 해결
    - 게시글 목록을 요청할 때 LastId를 쿼리스트링으로 보내준다.
    - LastId가 0이 아니면 LastId 보다 작은 id를 가진 게시글을 읽어온다.
    - 불러오는 게시글의 갯수가 10이 아니면 더이상 읽어오지 않는다.